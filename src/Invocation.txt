-For desktop operation in a cmd.exe window (i.e. not using github workflow on the github servers)
remember to first setup a virtual environment for python just for use for running the inventory and models programs since
you will be possibly installing python packages in conflict with whatever python packages you normally run
Then the virtual environment is activated as shown by the activate command below.
Note that you need this virtual environment regardless of running the searchForVehicles.py or the Get-ToyotaInventory.ps1 powershell script

C:\Users\GregG\AppData\Local\Programs\yotagrabber_venv\Scripts\activate
cd C:\Users\GregG\Documents\GitHub\yotagrabber\src
set MODEL=rav4prime
rem optionally if you want to just search about a given zipcode instead of finding all of that model in the US
rem you can additionally specify environment variables
rem set MODEL_SEARCH_ZIPCODE=90210
rem set MODEL_SEARCH_RADIUS=75
rem Note that the toyota website only allows you to access a max of 40 pages at 250 vehicles per page of the search results for a single zip code search
rem For 2025 and on rav4pluginhybrid is used instead of rav4prime
rem To use rav4prime you need to manually modify the models.json file to add the rav4prime entry by hand 
rem othewise the vehicles.py won't recognize that as a valid model since that is no longer listed as a model
rem set MODEL=rav4pluginhybrid
rem either py or python as the first word below
py searchForVehicles.py SearchVehicles_config.yaml

--------------------------------------------------------------

If you are running in a Windows Power shell then use the following

Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force
C:\Users\GregG\AppData\Local\Programs\yotagrabber_venv\Scripts\activate.ps1
cd C:\Users\GregG\Documents\GitHub\yotagrabber\src
$env:MODEL = 'rav4prime'
# optionally if you want to just search about a given zipcode instead of finding all of that model in the US
# you can additionally specify environment variables
# $env:MODEL_SEARCH_ZIPCODE = '90210'
# $env:MODEL_SEARCH_RADIUS = '75'
# Note that the toyota website only allows you to access a max of 40 pages at 250 vehicles per page of the search results for a single zip code search
# For 2025 and on rav4pluginhybrid is used instead of rav4prime
# To use rav4prime you need to manually modify the models.json file to add the rav4prime entry by hand 
# othewise the vehicles.py won't recognize that as a valid model since that is no longer listed as a model
# $env:MODEL = 'rav4pluginhybrid'
# either py or python as the first word below
py searchForVehicles.py SearchVehicles_config.yaml

Note that to deactivate the virtual environment in Power Shell simply use the following command (no ps1 extension)
deactivate

--------------------------------------------------------------------
For running the Get-ToyotaInventory.ps1 script you need to supply two parameters       
$DirectoryToRunIn  = "directory you want the script to run in"
$PythonVENVPowershellActivateScript = "ps1 activate script name including path that activates the python virtual environment to be used for the run"

To just run the script
Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force
C:\Users\GregG\Documents\GitHub\yotagrabber\Get-ToyotaInventory.ps1 $DirectoryToRunIn $PythonVENVPowershellActivateScript

To schedule this script to be run as a job use the following in a PowerShell adjusted to whatever schedule you want.
Keep in mind that to much traffic to the toyota website could cause the website to block you or throttle you so 
in general requesting no more than once a day is recommended.
# use default options
$jobOptionsToUse = New-ScheduledJobOption -RunElevated
$jobTriggersToUse = New-JobTrigger -Weekly -DaysOfWeek Monday, Wednesday, Friday -At "23:00"
$DirectoryToRunIn  = "directory you want the script to run in"
$PythonVENVPowershellActivateScript = "ps1 activate script name including path that activates the python virtual environment to be used for the run"
Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force
Register-ScheduledJob -Name "GetToyotaModelsAndInventory" -FilePath "ps1 script name including path you want to run as a job" -Trigger $jobTriggersToUse -ScheduledJobOption $jobOptionsToUse -ArgumentList $DirectoryToRunIn, $PythonVENVPowershellActivateScript

You can also force that scheduled job to start right away using
Start-Job -DefinitionName "GetToyotaModelsAndInventory" 

and then use
Receive-Job -Name "GetToyotaModelsAndInventory" -Keep
to see the console output of that running job up to that point.  
Leaving off the -Keep will not retain all the output but ony show you the output since the last Receive-Job was run
after the last Receive-Job was run.
Othewise you can can use the Get-Content -Path $logfile -Tail 0 -Wait as described below

!!!!Note:  The power shell Start-Transcript command logging does not seem to consistently capture all the output to the console.
Tried a few things suggested in internet searches regarding the transcript command but none seemed to work consistently (even the tee object didn't work for me).
However, did find in one internet search that if just use the power shell redirect output   *> or *>> (for append) filename  ,  
then all the output was consistently sent to that filename, however you can't see any output on the console of course when using this.
This output redirect to the logfile was added inside the Get-ToyotaInventory.ps1 so is automatically performed.

If you want to see the output at the same time then you can open another power shell window and
enter the following commands that outputs to the console the contents of that log file as it grows
$logfile = "the directory you wanted the script to run in"  + "\output\InventoryRunlog.txt"
Get-Content -Path $logfile -Tail 0 -Wait

--------------------------------------------------------
For updating the dealers.csv that vehicles.py uses to find the state a dealerId is in (the graphql only has the dealerId
, which is a number, and not the dealer state and some other dealer detail, for it) run the following
py dealers.py ".\yotagrabber\data\dealers.csv" ".\yotagrabber\data\zipcodes.txt" 
Note that this can take a few hours to run as it spreads out its request over time so as to not
overwhelm the toyota website.
If after getting a models inventory you find the state field is blank for some entries it is because the
dealers.csv file does not have that dealers dealerId in it.
You can determine the zipcodes for the missing entries and then add those to the zipcodes.txt file,
as well as putting them in a missingZipcodes.txt file
Then you can run
py dealers.py ".\yotagrabber\data\dealers.csv" ".\yotagrabber\data\missingZipcodes.txt" 
to update the dealers.csv with those dealers for those missing zipcodes
