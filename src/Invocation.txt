-For desktop operation in a cmd.exe window (i.e. not using github workflow on the github servers)
remember to first setup a virtual environment for python just for use for running the inventory and models programs since
you will be possibly installing python packages in conflict with whatever python packages you normally run
Then the virtual environment is activated as shown by the activate command below.
Note that you need this virtual environment regardless of running the searchForVehicles.py or the Get-ToyotaInventory.ps1 powershell script

C:\Users\GregG\AppData\Local\Programs\yotagrabber_venv\Scripts\activate
cd C:\Users\GregG\Documents\GitHub\yotagrabber\src
set MODEL=rav4prime
rem optionally if you want to just search about a given zipcode instead of finding all of that model in the US
rem you can additionally specify environment variables
rem set MODEL_SEARCH_ZIPCODE=90210
rem set MODEL_SEARCH_RADIUS=75
rem Note that the toyota website only allows you to access a max of 40 pages at 250 vehicles per page of the search results for a single zip code search
rem For 2025 and on rav4pluginhybrid is used instead of rav4prime
rem set MODEL=rav4pluginhybrid
rem either py or python as the first word below
py searchForVehicles.py SearchVehicles_config.yaml

Note that you can run several different searchForVehicles searches at the same time by running each search 
in its own command/terminal window (i.e. x searches in x command/terminal windows) and directory.
Just make sure that
 
1) You create a different directory for each search (that directory is where the search is invoked from), 
and have a subdirectory in that directory named "output" that contains a copy of the models.json file in it.

2) Have the yaml config file for that search in that search directory and modify the config file items
resultsFileName, userMatchCriteriaFilterFileName, computerSoundNotificationFileName, authenticationAuthorizationPath,
and notificationMsgPrefixString as needed.  Generally you will have the  resultsFileName, and userMatchCriteriaFilterFileName
just refer to a file in the current directory (i.e. .\<name of file>), where the search is run, but you would probably use the 
absolute pathname for the place where the existing computerSoundNotificationFileName file is (so you don't need to copy that file)
and the absolute path name for authenticationAuthorizationPath where the credentials file is (again so you don't need
to copy that file)

3) Change to that new command window and change to that new directory.  Activate the python environment as before.
Set the environment variables as needed for the model you are searching for
(MODEL, optionally MODEL_SEARCH_ZIPCODE and MODEL_SEARCH_RADIUS)

4) Invoke the program as follows:
py <fullpath name of searchForVehicles.py> <name of yaml config file>

5) Note that each search will request inventory from the website so be careful as to the amount of traffic
the website is receiving so that you don't get blocked or throttled.  Was to avoid this are to make the
search time interval larger or use the methods described in useLocalInventoryFile config file item 
in the SearchVehicles-Example_config.yaml 

Note:  The searchForVehicles program saves off the last matches(i.e. meeting the user match criteria) found each time in a 
parquet file (based on the resultsFileName config item as the prefix of the filename so that the parquet file is associated with
the resultsFileName).  Thus you can run several different config files with each having different resultsFileName
in them and they are independent in regards to the last matches parquet file)
The program will when started , use that parquet file to start from as the last matches.  
Thus the program can be terminated and restarted and it will pick up in regards to the last matches.
If you want the program to start from empty matches for your criteria, then simply delete the associated lastuser matches
parquet file

For scenarios where the user is looking for inventory for several other people with different matching criteria,
see the useLocalInventoryFile config file item in the SearchVehicles-Example_config.yaml for other options to do that.
 
--------------------------------------------------------------

If you are running in a Windows Power shell then use the following

Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force
C:\Users\GregG\AppData\Local\Programs\yotagrabber_venv\Scripts\activate.ps1
cd C:\Users\GregG\Documents\GitHub\yotagrabber\src
$env:MODEL = 'rav4prime'
# optionally if you want to just search about a given zipcode instead of finding all of that model in the US
# you can additionally specify environment variables
# $env:MODEL_SEARCH_ZIPCODE = '90210'
# $env:MODEL_SEARCH_RADIUS = '75'
# Note that the toyota website only allows you to access a max of 40 pages at 250 vehicles per page of the search results 
# for a single zip code search.  When no zip code is specified, this limitation is accounted for by 
# the program searching many zipcodes across the US and combinging the results.
# For 2025 and on rav4pluginhybrid is used instead of rav4prime
# To use rav4prime you need to manually modify the models.json file to add the rav4prime entry by hand 
# othewise the vehicles.py won't recognize that as a valid model since that is no longer listed as a model
# $env:MODEL = 'rav4pluginhybrid'
# either py or python as the first word below
py searchForVehicles.py SearchVehicles_config.yaml

Note that to deactivate the virtual environment in Power Shell simply use the following command (no ps1 extension)
deactivate

--------------------------------------------------------------------
For running the Get-ToyotaInventory.ps1 script you need to supply the following parameters in a Power shell run as an administrator.  
Optional ones are not required and can be completely left off.
$DirectoryToRunIn  = "directory you want the script to run in"
$PythonVENVPowershellActivateScript = "ps1 activate script name including path that activates the python virtual environment to be used for the run"
optional $uploadInventory = "" if you don't want to upload the files to a google drive (the default),
                            "upload"  if you do want to upload the files to a google drive folder named Vehicle_Inventory that you have setup for access
optional $credentialsFileName = the full path file name of the google credentials file to be used if upload was specified.

To just run the script
Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force
C:\Users\GregG\Documents\GitHub\yotagrabber\Get-ToyotaInventory.ps1 $DirectoryToRunIn $PythonVENVPowershellActivateScript -uploadInventory $uploadInventory  -credentialsFileName $credentialsFileName

To schedule this script to be run as a job use the following in a PowerShell adjusted to whatever schedule you want.
Keep in mind that too much traffic to the toyota website could cause the website to block you or throttle you so 
in general requesting no more than once a day is recommended.
# use default options
$jobOptionsToUse = New-ScheduledJobOption -RunElevated
$jobTriggersToUse = New-JobTrigger -Weekly -DaysOfWeek Monday, Wednesday, Friday -At "23:00"
$DirectoryToRunIn  = as described above
$PythonVENVPowershellActivateScript = as described above
optional $uploadInventory = as described above
optional $credentialsFileName = as described above
Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force
Register-ScheduledJob -Name "GetToyotaModelsAndInventory" -FilePath "ps1 script name including path you want to run as a job" -Trigger $jobTriggersToUse -ScheduledJobOption $jobOptionsToUse -ArgumentList $DirectoryToRunIn, $PythonVENVPowershellActivateScript, $uploadInventory, $credentialsFileName

Note that for some unknown reason to get the task scheduler to run that script I need to add an initial set execution policy command ahead of the script
(note that the jobOptionsToUse has the -RunElevated setting but that doesn't seem to matter to get the script to run)
by running Windows Task Scheduler and then finding the folder  Task Scheduler Libarary ---> Microsoft ----> Windows  ----> PowerShell  
---> Scheduled Jobs
Then click on the GetToyotaModelsAndInventory job, and then in the right hand action pane click on Selected Items ----> Properties
which pops up a properties window.  Go to the Actions tab, click on the Start Program line and then click on the Edit button.
In the "Add Arguements (optional)"  line  find the 
-Command "
and then insert the following after the " including a space at the end of what is inserted below  (so ; and then space)
Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force;

Alternatively, but still requiring you manually modify the execution policy in Task scheduler, is to get into Task Scheduler as above 
and to the Add Arguements line,  add
-ExecutionPolicy Bypass
 as the first arguement on the line 

There may be an easier way to get this execution policy set for that script but I don't know how to do it.

You can also force that scheduled job to start right away using
Start-Job -DefinitionName "GetToyotaModelsAndInventory" 

and then use
Receive-Job -Name "GetToyotaModelsAndInventory" -Keep
to see the console output of that running job up to that point.  
Leaving off the -Keep will not retain all the output but only show you the output since the last Receive-Job was run
after the last Receive-Job was run.
Othewise you can can use the Get-Content -Path $logfile -Tail 0 -Wait as described below

!!!!Note:  The power shell Start-Transcript command logging does not seem to consistently capture all the output to the console.
Tried a few things suggested in internet searches regarding the transcript command but none seemed to work consistently (even the tee object didn't work for me).
However, did find in one internet search that if just use the power shell redirect output   *> or *>> (for append) filename  ,  
then all the output was consistently sent to that filename, however you can't see any output on the console of course when using this.
This output redirect to the logfile was added inside the Get-ToyotaInventory.ps1 so is automatically performed.

If you want to see the output at the same time then you can open another power shell window and
enter the following commands that outputs to the console the contents of that log file as it grows
$logfile = "the directory you wanted the script to run in"  + "\output\InventoryRunlog.txt"
Get-Content -Path $logfile -Tail 0 -Wait

The program upload-files.py does the upload of the inventory files to a google drive. To use that
you must use google developers to enable your google drive to be accessed via that, and must create credentials to be used
for that access.  This is the same as what must be done if you use gmail as the sender source for the email option when running searchForVehicles.py
upload-files.py takes 3 command line parameters which are directory where the inventory files are, googleDriveFolderName where
the inventory files are to be placed on the google drive, and the credentialsFileName for accessing the google drive.


--------------------------------------------------------
For updating the dealers.csv that vehicles.py uses to find the state a dealerId is in (the graphql only has the dealerId
, which is a number, and not the dealer state and some other dealer detail, for it) run the following

py dealers.py ".\yotagrabber\data\dealers.csv" ".\yotagrabber\data\zipcodes.txt" 

Note that this can take a few hours to run as it spreads out its request over time so as to not
overwhelm the toyota website.
If after getting a models inventory you find the state field is blank for some entries it is because the
dealers.csv file does not have that dealers dealerId in it.
You can determine the zipcodes for the missing entries and then add those to the zipcodes.txt file,
as well as putting them in a missingZipcodes.txt file
Then you can run
py dealers.py ".\yotagrabber\data\dealers.csv" ".\yotagrabber\data\missingZipcodes.txt" 
to update the dealers.csv with those dealers for those missing zipcodes
